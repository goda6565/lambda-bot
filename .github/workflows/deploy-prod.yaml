name: "Build and Deploy"

on:
  push:
    branches:
      - main
    paths:
      - "Dockerfile"
      - "app/**"

env:
  OIDC_ARN: arn:aws:iam::061051222129:role/github-actions-oidc-role
  ECR_REGISTRY: 061051222129.dkr.ecr.ap-northeast-1.amazonaws.com
  ECR_REPOSITORY: lambda-bot-prod
  LAMBDA_FUNCTION_NAME: lambda-bot-prod
  LAMBDA_ALIAS_NAME: prod
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Assume Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.OIDC_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Build and push image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          provenance: false
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          platforms: linux/arm64

      - name: Move build cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Update Lambda function image
        id: update_lambda
        run: |
          IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          VERSION=$(aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri "$IMAGE_URI" \
            --publish \
            --query 'Version' \
            --output text)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update Lambda alias to new version
        run: |
          aws lambda update-alias \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --name ${{ env.LAMBDA_ALIAS_NAME }} \
            --function-version ${{ steps.update_lambda.outputs.version }}
